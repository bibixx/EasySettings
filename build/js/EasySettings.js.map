{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-runtime/core-js/get-iterator.js","node_modules/babel-runtime/core-js/is-iterable.js","node_modules/babel-runtime/core-js/object/define-property.js","node_modules/babel-runtime/core-js/object/entries.js","node_modules/babel-runtime/helpers/classCallCheck.js","node_modules/babel-runtime/helpers/createClass.js","node_modules/babel-runtime/helpers/slicedToArray.js","node_modules/core-js/library/fn/get-iterator.js","node_modules/core-js/library/fn/is-iterable.js","node_modules/core-js/library/fn/object/define-property.js","node_modules/core-js/library/fn/object/entries.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_add-to-unscopables.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_classof.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_iter-create.js","node_modules/core-js/library/modules/_iter-define.js","node_modules/core-js/library/modules/_iter-step.js","node_modules/core-js/library/modules/_iterators.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_object-to-array.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_string-at.js","node_modules/core-js/library/modules/_to-index.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/core.get-iterator-method.js","node_modules/core-js/library/modules/core.get-iterator.js","node_modules/core-js/library/modules/core.is-iterable.js","node_modules/core-js/library/modules/es6.array.iterator.js","node_modules/core-js/library/modules/es6.object.define-property.js","node_modules/core-js/library/modules/es6.string.iterator.js","node_modules/core-js/library/modules/es7.object.entries.js","node_modules/core-js/library/modules/web.dom.iterable.js","src/js/EasySettings.js","src/js/actions/EasySettingsMovementManager.js","src/js/sections/Section.js","src/js/sections/elements/Button.js","src/js/sections/elements/Checkbox.js","src/js/sections/elements/Dropdown.js","src/js/sections/elements/HTML.js","src/js/sections/elements/Header.js","src/js/sections/elements/Input.js","src/js/sections/elements/Progress.js","src/js/sections/elements/Radio.js","src/js/sections/elements/Slider.js","src/js/sections/elements/SliderMovementManager.js","src/js/sections/elements/Textarea.js","src/js/utils/DOMUtils.js"],"names":[],"mappings":"AAAA;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;;ACFA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC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","file":"EasySettings.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/is-iterable\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/entries\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isIterable2 = require(\"../core-js/is-iterable\");\n\nvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\nvar _getIterator2 = require(\"../core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if ((0, _isIterable3.default)(Object(arr))) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.is-iterable');","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};","require('../../modules/es7.object.entries');\nmodule.exports = require('../../modules/_core').Object.entries;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require('./_global').document && document.documentElement;","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","module.exports = true;","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require('./_an-object')\n  , dPs         = require('./_object-dps')\n  , enumBugKeys = require('./_enum-bug-keys')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};","var dP       = require('./_object-dp')\n  , anObject = require('./_an-object')\n  , getKeys  = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require('./_has')\n  , toObject    = require('./_to-object')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};","var has          = require('./_has')\n  , toIObject    = require('./_to-iobject')\n  , arrayIndexOf = require('./_array-includes')(false)\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require('./_object-keys-internal')\n  , enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};","exports.f = {}.propertyIsEnumerable;","var getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject')\n  , isEnum    = require('./_object-pie').f;\nmodule.exports = function(isEntries){\n  return function(it){\n    var O      = toIObject(it)\n      , keys   = getKeys(O)\n      , length = keys.length\n      , i      = 0\n      , result = []\n      , key;\n    while(length > i)if(isEnum.call(O, key = keys[i++])){\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","module.exports = require('./_hide');","var def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var shared = require('./_shared')('keys')\n  , uid    = require('./_uid');\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};","var global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","var toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","var toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","var anObject = require('./_an-object')\n  , get      = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function(it){\n  var iterFn = get(it);\n  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').isIterable = function(it){\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    || Iterators.hasOwnProperty(classof(O));\n};","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});","'use strict';\nvar $at  = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","// https://github.com/tc39/proposal-object-values-entries\nvar $export  = require('./_export')\n  , $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it){\n    return $entries(it);\n  }\n});","require('./es6.array.iterator');\nvar global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , TO_STRING_TAG = require('./_wks')('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}","import DOMUtils from \"./utils/DOMUtils\";\n\nimport EasySettingsMovementManager from \"./actions/EasySettingsMovementManager\";\nimport Section from \"./sections/Section\";\n\n/**\n * @module Panel\n*/\n\nlet dif = false;\n\nlet isSetupDone = false;\n\n/**\n * Creates a panel.\n * @class\n * @param {number} [x] - specifies initial x position of panel\n * @param {number} [y] - specifies initial y position of panel\n * @param {string} [title] - specifies title of panel\n * @example\n * const panel = new EasySettings();\n */\n\nexport default class EasySettings {\n  constructor( x, y, title ) {\n    this.container = null;\n    this.header = null;\n    this.body = null;\n    this.sections = [];\n    this.elements = {};\n    this.title = title;\n    this.pos = {\n      x: x || 8,\n      y: y || 8,\n    };\n\n    if ( !isSetupDone && !dif ) {\n      EasySettings.createHeaderTags();\n    }\n\n    this.createSettingsContainer();\n\n    this.movementManager = new EasySettingsMovementManager( this.container, this.header );\n  }\n\n  static createHeaderTags() {\n    isSetupDone = true;\n\n    DOMUtils.createElement( \"link\", document.head, null, { href: \"https://fonts.googleapis.com/css?family=Roboto+Mono|Roboto:400,500|Material+Icons\", rel: \"stylesheet\" } );\n  }\n\n  /**\n   * Disables inserting 3 fonts (”Roboto Mono”, ”Roboto”, ”Material Icons”) on library startup.\n   @static\n  */\n\n  static disableInsertingFonts() {\n    dif = true;\n  }\n\n  createSettingsHeader() {\n    this.header = DOMUtils.createElement( \"header\", this.container, { className: \"es-header\" } );\n\n    DOMUtils.createElement( \"span\", this.header, { innerHTML: this.title || \"EasySettings Panel\" } );\n  }\n\n  createSettingsBody() {\n    this.body = DOMUtils.createElement( \"main\", this.container, { className: \"es-body\" } );\n  }\n\n  createSettingsContainer() {\n    this.container = DOMUtils.createElement( \"div\", null, { className: \"es-container\" } );\n    const $container = this.container;\n\n    this.createSettingsHeader();\n    this.createSettingsBody();\n\n    document.body.insertBefore( $container, document.body.firstChild );\n\n    $container.style.left = `${this.pos.x}px`;\n    $container.style.top = `${this.pos.y}px`;\n  }\n\n  /**\n   * Creates section\n   * @returns {module:Panel} Panel that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.createSection();\n  */\n\n  createSection() {\n    const newSection = new Section( this.body, this.elements, this.sections.length );\n    this.sections.push( newSection );\n    return newSection;\n  }\n\n  /**\n   * Gets value of component\n   * @param {string} id - id of the component which value is going to be returned\n   * @returns {string|number|boolean} Value of component wiht specified id\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addTextInput( \"input-text\", { value: \"EasySettings\" } );\n   * console.log( panel.getValue( \"input-text\" ) ); // logs EasySettings\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addNumberInput( \"input-number\", { value: Math.round( Math.PI * 100 ) } );\n   * console.log( panel.getValue( \"input-number\" ) ); // logs 314\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addCheckbox( \"checkbox\", { label: \"Value 1\", checked: true });\n   * console.log( panel.getValue( \"checkbox\" ) ); // logs true\n  */\n\n  getValue( id ) {\n    return this.elements[id].getValue();\n  }\n\n  /**\n   * Sets value of component\n   * @param {string} id - id of the component which value is going to be changed\n   * @param {string|number|boolean} value - value that component is supposed to have\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addTextInput( \"input-text\", { value: \"EasySettings\" } );\n   * panel.setValue( \"input-text\", \"EasySettings2\" ); // input now says ”EasySettings2”\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addNumberInput( \"input-number\", { value: Math.round( Math.PI * 100 ) } );\n   * panel.setValue( \"input-number\", 13 ); // input now says 13\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addCheckbox( \"checkbox\", { label: \"Value 1\", checked: true });\n   * panel.setValue( \"checkbox\", false ); // checkbox is off\n  */\n\n  setValue( id, value ) {\n    this.elements[id].setValue( value );\n  }\n\n  toggleIndeterminate( id ) {\n    this.elements[id].toggleIndeterminate();\n  }\n}\n\nwindow.EasySettings = EasySettings;\n","let zIndex = 0;\n\nexport default class EasySettingsMovementManager {\n  static getCurrentZIndex() {\n    return zIndex++;\n  }\n\n  constructor( panel, header ) {\n    this.panel = panel;\n    this.header = header;\n    this.visible = false;\n    this.startPos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.startPosOfPanel = {\n      x: 8,\n      y: 0,\n    };\n\n    this.handleMovement = this.handleMovement.bind( this );\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.header.addEventListener( \"mousedown\", ( e ) => {\n      this.startPos = {\n        x: e.pageX,\n        y: e.pageY,\n      };\n\n      const panelOffset = this.panel.getBoundingClientRect();\n      this.startPosOfPanel = {\n        x: panelOffset.left,\n        y: panelOffset.top,\n      };\n\n      this.panel.style.zIndex = EasySettingsMovementManager.getCurrentZIndex();\n\n      document.addEventListener( \"mousemove\", this.handleMovement );\n      document.addEventListener( \"mouseup\", () => {\n        document.removeEventListener( \"mousemove\", this.handleMovement );\n      } );\n    } );\n\n    this.header.addEventListener( \"mouseup\", ( e ) => {\n      if ( this.startPos.x - e.pageX === 0 && this.startPos.y - e.pageY === 0 ) {\n        this.visible = !this.visible;\n\n        const $main = this.panel.childNodes[1];\n\n        $main.style.height = ( !this.visible ) ? \"auto\" : 0;\n        $main.style.padding = ( !this.visible ) ? null : \"0 8px\";\n      }\n    } );\n  }\n\n  handleMovement( e ) {\n    this.panel.style.left = `${this.startPosOfPanel.x + ( e.pageX - this.startPos.x )}px`;\n    this.panel.style.top = `${this.startPosOfPanel.y + ( e.pageY - this.startPos.y )}px`;\n  }\n}\n","/* eslint-disable no-multiple-empty-lines */\n\nimport DOMUtils from \"../utils/DOMUtils\";\n\nimport Button from \"./elements/Button\";\nimport Checkbox from \"./elements/Checkbox\";\nimport Dropdown from \"./elements/Dropdown\";\nimport Header from \"./elements/Header\";\nimport HTML from \"./elements/HTML\";\nimport Input from \"./elements/Input\";\nimport Progress from \"./elements/Progress\";\nimport Radio from \"./elements/Radio\";\nimport Slider from \"./elements/Slider\";\nimport Textarea from \"./elements/Textarea\";\n\n/**\n * @module Section\n*/\n\nexport default class Section {\n  constructor( esBody, elements, index ) {\n    this.esBody = esBody;\n    this.body = null;\n    this.elements = elements;\n    this.index = index;\n    this.create();\n    return this;\n  }\n\n  create() {\n    this.body = DOMUtils.createElement( \"div\", this.esBody, { className: \"es-body__section\" } );\n  }\n\n  addToContent( id, el ) {\n    if ( id !== null ) {\n      this.elements[id] = el;\n    }\n  }\n\n  /* Adding certain elements */\n\n  /**\n   * Adds button\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value=Button] - text displayed in button\n   * @param {callback} [callback] - callback triggered on click\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addButton( \"button\", { value: \"Button\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"button\" ); // returns text of button (”Button”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"header\", \"Button 2\" ); // sets text of button to ”Button 2”\n  */\n\n  addButton( id, options, callback ) {\n    const element = new Button( this.body, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds checkbox\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.label] - label of the checkbox\n   * @param {boolean} [options.checked=false] - label of the checkbox\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addCheckbox( \"checkbox\", { label: \"Value 1\", checked: true });\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"checkbox\" ); // returns value of checkbox (true)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"checkbox\", false ); // sets value of checkbox to false\n  */\n\n  addCheckbox( id, options, callback ) {\n    const element = new Checkbox( this.body, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds color input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value=#000000] - default value\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addColorInput( \"color\", { value: \"#000000\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"color\" ); // returns value of input (”#000000”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"color\", \"#FF0000\" ); // sets value of input to ”#FF0000”\n  */\n\n  addColorInput( id, options = {}, callback ) {\n    options.value = options.value || \"#000000\";\n    const element = new Input( this.body, \"color\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds date input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - default value of format (yyyy-mm-dd)\n   * @param {number} [options.min] - minimal value\n   * @param {number} [options.max] - maximal value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addDateInput( \"date\", { value: \"1999-01-10\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"date\" ); // returns value of input (”1999-01-10”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"date\", \"2017-02-20\" ); // sets value of input to ”2017-02-20”\n  */\n\n  addDateInput( id, options, callback ) {\n    const element = new Input( this.body, \"date\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n\n  /**\n   * Adds datetime input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - default value of format (yyyy-mm-ddThh:mm:ss)\n   * @param {number} [options.min] - minimal value\n   * @param {number} [options.max] - maximal value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addDateTimeInput( \"datetime\", { value: \"1999-01-10T12:31:00\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"datetime\" ); // returns value of input (”1999-01-10T12:31:00”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"datetime\", \"2017-02-20T13:02:02\" ); // sets value of input to ”2017-02-20T13:02:02”\n  */\n\n  addDateTimeInput( id, options, callback ) {\n    const element = new Input( this.body, \"datetime-local\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds dropdown\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {array} [options.options] - options to be displayed\n   * @param {number} [options.value] - index of option to be selected on startup\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addDropdown( \"dropdown\", { options: [\"Dropdown option #1\", \"Dropdown option #2\"] } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"dropdown\" ); // returns selected value (”Dropdown option #1”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"dropdown\", 1 ); // sets index of dropdown to 1, so select says ”Dropdown option #2”\n  */\n\n  addDropdown( id, options, callback ) {\n    const element = new Dropdown( this.body, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds header\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - text displayed as header\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addHeader( \"header\", { value: \"Header\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"header\" ); // returns text of header (”Header”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"header\", \"header 2\" ); // sets text of header to ”header 2”\n  */\n\n  addHeader( id, options ) {\n    const element = new Header( this.body, options, \"h\" );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds HTML container\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - HTML to be inserted into container\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addHTML( \"html\", { value: \"<strong>HTML</strong>\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"html\" ); // returns HTML of component (”<strong>HTML</strong>”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"html\", \"<em>HTML 2</em>\" ); // sets HTML of component to ”<em>HTML 2</em>”\n  */\n\n  addHTML( id, options ) {\n    const element = new HTML( this.body, options );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds number input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {number} [options.value] - default value\n   * @param {number} [options.min] - minimal value\n   * @param {number} [options.max] - maximal value\n   * @param {number} [options.step] - step of values\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addNumberInput( \"input-number\", { value: Math.round( Math.PI * 100 ) } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"input-number\" ); // returns value of component (314)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"input-number\", 13 ); // sets value of component to 13\n  */\n\n  addNumberInput( id, options, callback ) {\n    const element = new Input( this.body, \"number\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds paragrpah\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - text displayed as paragrpah\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addParagraph( \"paragraph\", { value: \"Paragraph\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"paragraph\" ); // returns text of paragraph (”Paragraph”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"paragraph\", \"Paragraph 2\" ); // sets text of paragraph to ”Paragraph 2”\n  */\n\n  addParagraph( id, options ) {\n    const element = new Header( this.body, options, \"p\" );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds password input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - default value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addPasswordInput( \"input-password\", { value: \"admin1\", placeholder: \"Insert password\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"input-password\" ); // returns value of component (”admin1”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"input-password\", \"Password123\" ); // sets value of component to ”Password123”\n  */\n\n  addPasswordInput( id, options = {}, callback ) {\n    options.value = options.value || \"\";\n    const element = new Input( this.body, \"password\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds progress bar\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value=0] - default value\n   * @param {number} [options.min=0] - minimal value\n   * @param {number} [options.max=1] - maximal value\n   * @param {boolean} [options.indeterminate=false] - determines wheter progress bar should be indeterminate on startup\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addProgress( \"progress\", { value: 0.33, indeterminate: true } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"progress\" ); // returns value of component (0.33)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"progress\", 1 ); // sets value of component to 1\n  */\n\n  addProgress( id, options ) {\n    const element = new Progress( this.body, options );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds multiple radio inputs\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string[]} [options.values] - array of labels for inputs\n   * @param {number} [options.checkedIndex] - index of radio checked by default\n   * @param {callback} [callback] - callback triggered on change of any radio\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addRadio( \"radio\", { values: [\"Value 1\", \"Value 2\"], checkedIndex: 0 } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"radio\" ); // returns index of checked radio\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"radio\", 1 ); // sets index of checked radio to 1\n  */\n\n  addRadio( id, options, callback ) {\n    const element = new Radio( this.body, this.index, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds slider\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {number} [options.value] - default value\n   * @param {number} [options.min] - minimal value\n   * @param {number} [options.max] - maximal value\n   * @param {number} [options.step] - step of values\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addSlider( \"slider\", { value: 25, min: 0, max: 1000 } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"slider\" ); // returns value of slider (25)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"slider\", 98 ); // sets value of slider to 98\n  */\n\n  addSlider( id, options, callback ) {\n    const element = new Slider( this.body, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds textarea\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {number} [options.value] - default value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addTextarea( \"textarea\", { value: \"my text\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"textarea\" ); // returns value of textarea (”my text”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"textarea\", \"my text 2\" ); // sets value of textarea to ”2017-02-20”\n  */\n\n  addTextarea( id, options, callback ) {\n    const element = new Textarea( this.body, options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds text input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - default value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addTextInput( \"text-input\", { value: \"my input\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"text-input\" ); // returns value of textarea (”my input”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"text-input\", \"my input 2\" ); // sets value of textarea to ”my input 2”\n  */\n\n  addTextInput( id, options = {}, callback ) {\n    options.value = options.value || \"\";\n    const element = new Input( this.body, \"text\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n\n  /**\n   * Adds time input\n   * @param {string} [id] - id of the component\n   * @param {object} [options] - options for component\n   * @param {string} [options.value] - default value of format (hh:mm:ss)\n   * @param {number} [options.min] - minimal value\n   * @param {number} [options.max] - maximal value\n   * @param {string} [options.placeholder] - placeholder of input\n   * @param {callback} [callback] - callback triggered on change\n   * @returns {module:Section} Section that component is added to\n   * @example\n   * const panel = new EasySettings();\n   * panel.addSection()\n   *   .addDateTimeInput( \"time\", { value: \"12:31:00\" } );\n\n   * @example\n   * // See => [Panel.getValue()]{@link module:Panel#getValue}\n   * panel.getValue( \"time\" ); // returns value of input (”12:31:00”)\n\n   * @example\n   * // See => [Panel.setValue()]{@link module:Panel#setValue}\n   * panel.setValue( \"time\", \"13:02:02\" ); // sets value of input to ”13:02:02”\n  */\n\n  addTimeInput( id, options, callback ) {\n    const element = new Input( this.body, \"time\", options, callback );\n    this.addToContent( id, element );\n    return this;\n  }\n}\n\n/**\n * @callback callback\n * @param {string|number} value - value of component\n * @example\n * const panel = new EasySettings();\n * panel.addSection()\n *   .addNumberInput( \"input-number\", { value: Math.round( Math.random() * 100 ) }, ( v ) => {\n *     console.log( v ); // logs value of input every time it changes\n *   } );\n*/\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Button {\n  constructor( section, options = {}, callback = () => {} ) {\n    this.element = null;\n    this.section = section;\n    this.text = options.value || \"Button\";\n    this.callback = callback;\n    this.create();\n  }\n\n  create() {\n    const $button = DOMUtils.createElement( \"button\", this.section, { className: \"es-body__section__button\", innerHTML: this.text } );\n\n    this.element = $button;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"click\", () => {\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    return this.element.innerHTML;\n  }\n\n  setValue( val ) {\n    this.element.innerHTML = val;\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Checkbox {\n  constructor( section, options = {}, callback = () => {} ) {\n    this.element = null;\n    this.section = section;\n    this.label = options.label || \"\";\n    this.checked = options.checked || false;\n    this.callback = callback;\n    this.create();\n  }\n\n  create() {\n    const $label = DOMUtils.createElement( \"label\", this.section, { className: \"es-body__section__label\" } );\n\n    const $checkbox = DOMUtils.createElement( \"input\", $label, { className: \"body__section__checkbox\", innerHTML: this.label, checked: this.checked }, { \"type\": \"checkbox\" } );\n\n    const $icon = DOMUtils.createElement( \"span\", $label, { className: \"es-body__section__label__icon\" }, { tabindex: 0 } ); // labelIcon\n\n    DOMUtils.createElement( \"span\", $icon, { className: \"es-body__section__label__icon--focused\" } ); // labelIconFocused\n\n    DOMUtils.createElement( \"span\", $label, { className: \"es-body__section__label__text\", innerHTML: this.label } ); // labelText\n\n    $icon.addEventListener( \"keydown\", ( e ) => {\n      if ( e.keyCode === 32 || e.keyCode === 13 ) {\n        $checkbox.checked = !$checkbox.checked;\n        DOMUtils.dispatchEvent( $checkbox, \"change\" );\n      }\n    } );\n\n    this.element = $checkbox;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"change\", () => {\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    return this.element.checked;\n  }\n\n  setValue( val ) {\n    this.element.checked = val;\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Dropdown {\n  constructor( section, options = {}, callback = () => {} ) {\n    this.element = null;\n    this.section = section;\n    this.options = options.options || [];\n    this.value = this.options[options.value] || false;\n    this.callback = callback;\n    this.create();\n  }\n\n  create() {\n    const $dropdown = DOMUtils.createElement( \"select\", this.section, { className: \"body__section__dropdown\" } );\n\n    this.options.forEach( ( v ) => {\n      const $option = document.createElement( \"option\" );\n      $option.innerHTML = v;\n      $dropdown.appendChild( $option );\n    } );\n\n    if ( this.value !== false ) {\n      $dropdown.value = this.value;\n    }\n\n    this.element = $dropdown;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"change\", () => {\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    return this.element.value;\n  }\n\n  setValue( val ) {\n    if ( this.options[val] ) {\n      this.element.value = this.options[val];\n    }\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class HTML {\n  constructor( section, options ) {\n    this.element = null;\n    this.section = section;\n    this.value = options.value;\n    this.create();\n  }\n\n  create() {\n    const $cont = DOMUtils.createElement( \"div\", this.section, { className: \"es-body__section__html\", innerHTML: this.value } );\n\n    this.element = $cont;\n  }\n\n  getValue() {\n    return this.element.innerHTML;\n  }\n\n  setValue( val ) {\n    this.element.innerHTML = val;\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Header {\n  constructor( section, options = {}, type ) {\n    this.element = null;\n    this.section = section;\n    this.text = options.value || \"\";\n    this.type = type;\n    this.create();\n  }\n\n  create() {\n    if ( this.type === \"p\" ) {\n      this.element = DOMUtils.createElement( \"p\", this.section, { className: \"body__section__header\", innerHTML: `${this.text}` } );\n    } else {\n      this.element = DOMUtils.createElement( \"p\", this.section, { className: \"body__section__header\", innerHTML: `<strong>${this.text}</strong>` } );\n    }\n  }\n\n  getValue() {\n    return this.text;\n  }\n\n  setValue( val ) {\n    this.text = val;\n    if ( this.type === \"p\" ) {\n      this.element.innerHTML = `<strong>${val}</strong>`;\n    } else {\n      this.element.innerHTML = val;\n    }\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Input {\n  constructor( section, type, options = {}, callback = () => {} ) {\n    this.element = null;\n    this.section = section;\n    this.value = options.value;\n    this.type = type;\n    this.callback = callback;\n    this.addOptions = options;\n    this.additionalElement = null;\n    this.create();\n  }\n\n  create() {\n    const $inputGroup = DOMUtils.createElement( \"span\", this.section, { className: \"es-body__section__input-group\" } );\n    let $input = null;\n\n    if ( this.type === \"color\" ) {\n      this.additionalElement = DOMUtils.createElement( \"label\", $inputGroup, { className: \"es-body__section__label-color\" } ); // Color label\n      this.additionalElement.style.background = this.value;\n\n      if ( this.value.match( /^#[abcdef0123456789]{3}$/i ) ) {\n        this.value = `#${this.value[1]}${this.value[1]}${this.value[2]}${this.value[2]}${this.value[3]}${this.value[3]}`;\n      }\n\n      $input = DOMUtils.createElement( \"input\", this.additionalElement, { className: `es-body__section__input es-body__section__input--${this.type}`, value: this.value }, { type: this.type } );\n    } else {\n      $input = DOMUtils.createElement( \"input\", $inputGroup, { className: `es-body__section__input es-body__section__input--${this.type}`, value: this.value }, { type: this.type } );\n    }\n\n\n    if ( typeof this.addOptions !== \"undefined\" ) {\n      if ( typeof this.addOptions.min !== \"undefined\" ) {\n        $input.setAttribute( \"min\", this.addOptions.min );\n      }\n\n      if ( typeof this.addOptions.max !== \"undefined\" ) {\n        $input.setAttribute( \"max\", this.addOptions.max );\n      }\n\n      if ( typeof this.addOptions.step !== \"undefined\" ) {\n        $input.setAttribute( \"step\", this.addOptions.step );\n      }\n\n      $input.placeholder = this.addOptions.placeholder || \"\";\n    }\n\n    if ( this.type !== \"color\" ) {\n      this.additionalElement = DOMUtils.createElement( \"span\", $inputGroup, { className: \"es-body__section__input-underline\" } ); // Underline\n    }\n\n    this.element = $input;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"input\", () => {\n      if ( this.type === \"color\" ) {\n        this.additionalElement.style.background = this.getValue();\n      }\n\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    if ( this.addOptions ) {\n      if ( this.addOptions.min !== null ) {\n        if ( this.addOptions.min > this.element.value ) {\n          return this.addOptions.min;\n        }\n      }\n\n      if ( this.addOptions.max !== null ) {\n        if ( this.addOptions.max < this.element.value ) {\n          return this.addOptions.max;\n        }\n      }\n    }\n\n    return this.element.value;\n  }\n\n  setValue( val ) {\n    this.element.value = val;\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Progress {\n  constructor( section, options ) {\n    this.element = null;\n    this.trackValue = null;\n    this.section = section;\n    this.value = Math.max( 0, Math.min( options.value, 1 ) );\n    this.addOptions = options;\n    this.indeterminate = false;\n    this.create();\n  }\n\n  create() {\n    const $inputGroup = DOMUtils.createElement( \"span\", this.section, { className: \"es-body__section__progress-group\" } );\n\n    const $input = DOMUtils.createElement( \"input\", $inputGroup, { className: \"es-body__section__progress\" }, { type: \"hidden\", value: this.value } );\n\n    const $track = DOMUtils.createElement( \"div\", $inputGroup, { className: \"es-body__section__progress-track\" } ); // Track\n\n    this.trackValue = DOMUtils.createElement( \"div\", $track, { className: \"es-body__section__slider-track__progress-value\" } ); // Track value\n\n    if ( typeof this.addOptions !== \"undefined\" && this.addOptions.indeterminate ) {\n      this.toggleIndeterminate();\n    }\n\n    this.trackValue.style.width = `${this.value * 100}%`;\n\n    this.element = $input;\n    this.track = $track;\n  }\n\n  getValue() {\n    return this.element.value;\n  }\n\n  setValue( val ) {\n    const value = Math.max( 0, Math.min( val, 1 ) );\n    this.element.value = value;\n    this.trackValue.style.width = `${value * 100}%`;\n  }\n\n  toggleIndeterminate() {\n    this.indeterminate = !this.indeterminate;\n\n    if ( this.indeterminate ) {\n      this.trackValue.className += \" es-body__section__slider-track__progress-value--indeterminate\";\n    } else {\n      this.trackValue.className = this.trackValue.className.replace( \" es-body__section__slider-track__progress-value--indeterminate\", \"\" );\n    }\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Radio {\n  constructor( section, index, options = {}, callback = () => {} ) {\n    this.element = null;\n    this.radios = [];\n    this.section = section;\n    this.index = index;\n    this.values = options.values || [];\n    this.checkedIndex = options.checkedIndex;\n    this.callback = callback;\n    this.create();\n  }\n\n  create() {\n    const $group = DOMUtils.createElement( \"div\", this.section, { className: \"es-body__section__radio-group\" } );\n\n    this.values.forEach( ( v, i ) => {\n      const $label = DOMUtils.createElement( \"label\", $group, { className: \"es-body__section__label\" } );\n\n      const $radio = DOMUtils.createElement( \"input\", $label, { className: \"es-body__section__checkbox\", checked: ( i === this.checkedIndex ) }, { type: \"radio\", name: `EasySettingsPanel-${this.index}` } );\n\n      const $icon = DOMUtils.createElement( \"span\", $label, { className: \"es-body__section__label__icon\" }, { tabindex: 0 } ); // Label icon\n\n      DOMUtils.createElement( \"span\", $icon, { className: \"es-body__section__label__icon--focused\" } ); // labelIconFocused\n\n      $icon.addEventListener( \"keydown\", ( e ) => {\n        if ( e.keyCode === 32 || e.keyCode === 13 ) {\n          this.setValue( i );\n          DOMUtils.dispatchEvent( $group, \"change\" );\n        }\n      } );\n\n      DOMUtils.createElement( \"span\", $label, { innerHTML: v } ); // Label text\n\n      this.radios.push( $radio );\n    } );\n\n    this.element = $group;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"change\", () => {\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    let index = -1;\n    this.radios.forEach( ( v, i ) => {\n      if ( v.checked ) {\n        index = i;\n      }\n    } );\n\n    return index;\n  }\n\n  setValue( val ) {\n    this.radios.forEach( ( v, i ) => {\n      v.checked = ( i === val ); // eslint-disable-line no-param-reassign\n    } );\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\nimport SliderMovementManager from \"./SliderMovementManager\";\n\nexport default class Slider {\n  constructor( section, options, callback ) {\n    this.element = null;\n    this.section = section;\n    this.value = options.value * 1;\n    this.min = 0;\n    this.max = 100;\n    this.step = 0.1;\n    this.addOptions = options;\n    this.callback = callback || null;\n    this.SliderMovementManager = null;\n    this.create();\n  }\n\n  create() {\n    const $inputGroup = DOMUtils.createElement( \"span\", this.section, { className: \"es-body__section__slider-group\" } );\n\n    if ( typeof this.addOptions !== \"undefined\" ) {\n      if ( typeof this.addOptions.min !== \"undefined\" ) {\n        this.min = this.addOptions.min || 0;\n      }\n\n      if ( typeof this.addOptions.max !== \"undefined\" ) {\n        this.max = this.addOptions.max || 100;\n      }\n\n      if ( typeof this.addOptions.step !== \"undefined\" ) {\n        this.step = this.addOptions.step || 0.1;\n      }\n    }\n\n    if ( this.max === null ) {\n      this.max = 100;\n    }\n\n    const $input = DOMUtils.createElement( \"input\", $inputGroup, { className: \"es-body__section__slider\" }, { type: \"range\", min: this.min, max: this.max, value: this.value, step: this.step } );\n\n    const $track = DOMUtils.createElement( \"div\", $inputGroup, { className: \"es-body__section__slider-track\" } ); // Track\n    const $trackValue = DOMUtils.createElement( \"div\", $track, { className: \"es-body__section__slider-track__slider-value\" } ); // Track\n    const $handle = DOMUtils.createElement( \"button\", $track, { className: \"es-body__section__slider-track__slider-handle\" } ); // Track\n\n    this.SliderMovementManager = new SliderMovementManager( $handle, $track, $input, $trackValue );\n\n    this.SliderMovementManager.setHandleValue( this.value );\n\n    $handle.addEventListener( \"keydown\", ( e ) => {\n      let changeMultpilier = 1;\n\n      if ( e.shiftKey ) {\n        changeMultpilier = 10;\n      }\n\n      if ( e.altKey ) {\n        changeMultpilier = 0.1;\n      }\n\n\n      if ( e.keyCode === 39 ) {\n        this.element.value = parseFloat( this.element.value ) + changeMultpilier;\n        DOMUtils.dispatchEvent( this.element, \"input\" );\n      }\n\n      if ( e.keyCode === 37 ) {\n        this.element.value = parseFloat( this.element.value ) - changeMultpilier;\n        DOMUtils.dispatchEvent( this.element, \"input\" );\n      }\n    } );\n\n    this.element = $input;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"input\", () => {\n      this.callback( this.getValue() );\n      this.SliderMovementManager.setHandleValue();\n    } );\n  }\n\n  getValue() {\n    return this.element.value;\n  }\n\n  setValue( val ) {\n    this.element.value = val;\n    this.SliderMovementManager.setHandleValue();\n    DOMUtils.dispatchEvent( this.element, \"input\" );\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class trackMovementManager {\n  constructor( handle, track, input, trackValue ) {\n    // this.panel = panel;\n    this.handle = handle;\n    this.track = track;\n    this.input = input;\n    this.trackValue = trackValue;\n\n    this.offset = 0;\n    this.startPos = {\n      x: 0,\n      y: 0,\n    };\n\n    this.startPosOfPanel = {\n      x: 8,\n      y: 0,\n    };\n\n    this.handleMovement = this.handleMovement.bind( this );\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.handle.addEventListener( \"mousedown\", ( e ) => {\n      this.startPos = {\n        x: e.pageX,\n        y: e.pageY,\n      };\n\n      const handleOffset = this.handle.getBoundingClientRect();\n      const trackOffset = this.track.getBoundingClientRect();\n\n      this.startPosOfPanel = {\n        x: handleOffset.left - trackOffset.left,\n      };\n\n      document.addEventListener( \"mousemove\", this.handleMovement );\n      document.addEventListener( \"mouseup\", () => {\n        document.removeEventListener( \"mousemove\", this.handleMovement );\n      } );\n    } );\n  }\n\n  handleMovement( e ) {\n    this.offset = this.startPosOfPanel.x + ( e.pageX - this.startPos.x );\n    if ( this.offset < 0 ) {\n      this.offset = 0;\n    }\n\n    if ( this.offset > ( this.track.offsetWidth - this.handle.offsetWidth ) ) {\n      this.offset = this.track.offsetWidth - this.handle.offsetWidth;\n    }\n\n    this.minValueStyle();\n    this.handle.style.left = `${this.offset}px`;\n\n    this.setInputValue();\n  }\n\n  setInputValue() {\n    const max = this.track.offsetWidth - this.handle.offsetWidth;\n\n    const $inputMin = this.input.getAttribute( \"min\" ) * 1;\n    const $inputMax = this.input.getAttribute( \"max\" ) - $inputMin;\n\n    this.input.value = ( $inputMax * ( this.offset / max ) ) + $inputMin;\n\n    DOMUtils.dispatchEvent( this.input, \"input\" );\n  }\n\n  setHandleValue() {\n    const max = this.track.offsetWidth - this.handle.offsetWidth;\n\n    const $inputMin = this.input.getAttribute( \"min\" ) * 1;\n    const $inputMax = this.input.getAttribute( \"max\" ) - $inputMin;\n\n    this.trackValue.style.width = `${100 * ( ( this.input.value - $inputMin ) / $inputMax )}%`;\n\n    this.offset = max * ( ( this.input.value - $inputMin ) / $inputMax );\n\n    this.minValueStyle();\n    this.handle.style.left = `${this.offset}px`;\n  }\n\n  minValueStyle() {\n    const classes = this.handle.className.split( \" \" );\n    const minValClass = \"es-body__section__slider-track__slider-handle--min-value\";\n    const index = classes.indexOf( minValClass );\n    if ( this.offset <= 0 ) {\n      if ( index < 0 ) {\n        classes.push( minValClass );\n        this.handle.className = classes.join( \" \" );\n      }\n    } else if ( index >= 0 ) {\n      classes.splice( index, 1 );\n      this.handle.className = classes.join( \" \" );\n    }\n  }\n}\n","import DOMUtils from \"../../utils/DOMUtils\";\n\nexport default class Textarea {\n  constructor( section, options, callback ) {\n    this.element = null;\n    this.section = section;\n    this.value = options.value;\n    this.callback = callback || null;\n    this.addOptions = options;\n    this.create();\n  }\n\n  create() {\n    const $inputGroup = DOMUtils.createElement( \"span\", this.section, { className: \"es-body__section__input-group\" } );\n\n    const $input = DOMUtils.createElement( \"textarea\", $inputGroup, { className: \"es-body__section__input es-body__section__input--textarea\", innerHTML: this.value } );\n\n    if ( this.addOptions.placeholder !== null ) {\n      $input.placeholder = this.addOptions.placeholder;\n    }\n\n    DOMUtils.createElement( \"span\", $inputGroup, { className: \"es-body__section__input-underline\" } ); // Underline\n\n    this.element = $input;\n\n    this.bindCallback();\n  }\n\n  bindCallback() {\n    this.element.addEventListener( \"input\", () => {\n      this.callback( this.getValue() );\n    } );\n  }\n\n  getValue() {\n    return this.element.innerHTML;\n  }\n\n  setValue( val ) {\n    this.element.innerHTML = val;\n  }\n}\n","export default class DOMUtils {\n  static createElement( type, parent, options, attributes ) {\n    const $el = document.createElement( type );\n\n    if ( options ) {\n      for ( const [key, value] of Object.entries( options ) ) {\n        $el[key] = value;\n      }\n    }\n\n    if ( attributes ) {\n      for ( const [key, value] of Object.entries( attributes ) ) {\n        $el.setAttribute( key, value );\n      }\n    }\n\n    if ( parent ) {\n      parent.appendChild( $el );\n    }\n\n    return $el;\n  }\n\n  static dispatchEvent( element, event ) {\n    if ( \"createEvent\" in document ) {\n      const evt = document.createEvent( \"HTMLEvents\" );\n      evt.initEvent( event, false, true );\n      element.dispatchEvent( evt );\n    } else {\n      element.fireEvent( \"onchange\" );\n    }\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}